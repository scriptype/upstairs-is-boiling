<script>
  const setCSSProperty = (key, value, element = window.document.documentElement) => {
    element.style.setProperty(key, value)
  }

  const getCSSProperty = (key, element = window.document.documentElement) => {
    return element.style.getPropertyValue(key)
  }

  const translateToPropertyName = (name) => {
    const upperCase = name.match(/[A-Z]/)
    if (!upperCase) {
      return `--${name}`
    }
    const [part1, ...restParts] = name.split(upperCase[0])
    const part2 = upperCase[0]
      .toLowerCase()
      .concat(
        translateToPropertyName(restParts.join(upperCase[0])).replace(/--/, '')
      )
    return `--${part1}-${part2}`.replace(/^---/, '--')
  }

  class ThemeVariable {
    constructor(key, value) {
      this.key = key
      this.value = value
      this.name = translateToPropertyName(key)
    }

    setCSSProperty() {
      return setCSSProperty(this.name, this.value)
    }

    getCSSProperty() {
      return getCSSProperty(this.name)
    }
  }

  class ThemeVariables {
    constructor(variables) {
      this.variables = Object.keys(variables).reduce((result, key) => {
        return {
          ...result,
          [key]: new ThemeVariable(key, variables[key])
        }
      }, {})
    }

    hasVariables() {
      return !!Object.keys(this.variables).length
    }

    activate() {
      Object.keys(this.variables).forEach(key => {
        const themeVariable = this.variables[key]
        themeVariable.setCSSProperty()
      })
    }
  }

  const defaultThemeVariables = new ThemeVariables({
    black: getCSSProperty('--black'),
    white: getCSSProperty('--white'),
    logoColor: getCSSProperty('--logo-color')
  })


{{#if (isPostPage)}}
  const variables = new ThemeVariables(window.themeVariables[0])
  if (variables.hasVariables) {
    variables.activate()
  }
{{/if}}


{{#if (isListingPage)}}
  const activateCarouselPanelThemeVariables = (themeVariables) => {
    const container = document.querySelector('[data-region-id="main"]')

    if (!container) {
      return
    }

    const activate = () => {
      const activeClass = 'active-panel'
      Array.from(container.children).forEach((panel, index) => {
        const diffY = Math.abs(container.scrollTop - panel.offsetTop)
        if (diffY >= container.offsetHeight && panel.classList.contains(activeClass)) {
          return panel.classList.remove(activeClass)
        }
        if (diffY > window.innerHeight / 5) {
          return
        }
        if (panel.classList.contains(activeClass)) {
          return
        }
        panel.classList.add(activeClass)
        const variables = new ThemeVariables(themeVariables[index])
        if (variables.hasVariables()) {
          return variables.activate()
        }
        return defaultThemeVariables.activate()
      })
    }

    activate()
    container.addEventListener('scroll', () => {
      activate(container)
    })
  }

  activateCarouselPanelThemeVariables(window.themeVariables)
{{/if}}


</script>
